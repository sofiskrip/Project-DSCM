library(shiny)
library(leaflet)
library(readxl)
library(ggplot2)

ui <- fluidPage(
  
  titlePanel("Royal Canin Dashboard"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput('file1', 'Choose xlsx file with Factory data',
                accept = c(".xlsx")),
      fileInput('file2', 'Choose xlsx file with DCs data',
                accept = c(".xlsx")),
      fileInput('file3', 'Choose xlsx file with Customer data',
                accept = c(".xlsx")),  
      plotOutput("plot2")
    ),
    
    mainPanel(
      leafletOutput("mymap"),
      fluidRow(
        splitLayout(cellWidths = c("50%", "50%"), tableOutput('file1'), tableOutput('file3'), tableOutput('file2'))
      )
    )
  )
)

server <- function(input, output, session) {
  
  output$file3 <- renderTable({
    inFile <- input$file2
    if (is.null(inFile))
      return(NULL)
    read_excel(inFile$datapath)
  })
  
  output$file2 <- renderTable({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    read_excel(inFile$datapath)
  })
  
  output$file1 <- renderTable({
    inFile <- input$file3
    if (is.null(inFile))
      return(NULL)
    read_excel(inFile$datapath)
  })
  
  m <- leaflet() %>%
    setView(lng = 60, lat = 55, zoom = 4) %>%
    addProviderTiles(providers$CartoDB.Positron)
  output$mymap <- renderLeaflet(m)
  
  observe({
    req(c(input$file1,input$file2,input$file3))
    inFile <- input$file1
    inFile2 <- input$file2
    inFile3 <- input$file3
    if (is.null(inFile))
      return(NULL)
    if (is.null(inFile2))
      return(NULL)
    if (is.null(inFile3))
      return(NULL)
    
    exceldata <- read_excel(inFile$datapath)
    df = data.frame(exceldata)
    exceldata2 <- read_excel(inFile2$datapath)
    df2 = data.frame(exceldata2)
    exceldata3 <- read_excel(inFile3$datapath)
    df3 = data.frame(exceldata3)
    
    proxy <- leafletProxy("mymap", data = df2, session)
    proxy %>% addProviderTiles(providers$Esri.NatGeoWorldMap, group= "NatGeo")
    proxy %>% addProviderTiles(providers$OpenTopoMap, group= "TopoMap") 
    proxy %>% addProviderTiles(providers$OpenRailwayMap, group= "Rail") 
    proxy %>% addProviderTiles(providers$Esri.WorldImagery, group="Satellite") 
    proxy %>% addProviderTiles("NASAGIBS.ViirsEarthAtNight2012", group="NASA")
    
    proxy %>% addCircles(df3$long,df3$lat, radius = (df3$demand) * 10, popup = df3$city, color = "#78150d")
    proxy %>% addMarkers(df2$long, df2$lat, popup = df2$ID, icon = list(iconUrl="https://cdn-icons-png.flaticon.com/512/609/609375.png", iconSize = c(30, 30)))    
    proxy %>% addMarkers(df$long, df$lat, popup = df$ID, icon = list(iconUrl="https://icon-library.com/images/factory-vector-icon/factory-vector-icon-3.jpg", iconSize = c(30, 30)))
    
    proxy %>% addLayersControl(baseGroups=c("Drawing", "Satellite", "NatGeo", "TopoMap", "NASA", "Rail"),
                               overlayGroups=c("1", "2", "3"),
                               options=layersControlOptions(collapsed=FALSE))
    
    output$plot2<-renderPlot(
      ggplot(df3) +
        aes(x = reorder(city,demand), y = demand) +
        geom_col(fill = "#78150d") +
        labs(
          x = "City",
          y = "Demand",
          title = "Demand distribution",
          subtitle = "9 cities",
          caption = "data from anyLogistix"
        ) +
        coord_flip() +
        theme_minimal()
    )
    
  })
}
shinyApp(ui = ui, server = server)
